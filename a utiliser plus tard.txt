Pour configurer l'authentification JWT pour les utilisateurs de l'API en ExpressJS, voici les étapes à suivre :

    Installer les packages nécessaires :
    npm install jsonwebtoken bcryptjs

  
  
Importer les packages dans le fichier où l'on souhaite configurer l'authentification :

    const jwt = require('jsonwebtoken');
    const bcrypt = require('bcryptjs');

Créer une fonction de génération de token :

    const generateToken = (user) => {
    const payload = {
        userId: user._id,
        email: user.email,
        isAdmin: user.isAdmin,
    };

    return jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' });
    };

Dans cette fonction, nous utilisons la méthode "jwt.sign" pour générer un token en utilisant les informations de l'utilisateur passées en paramètre (ici, l'identifiant de l'utilisateur, son email et son statut d'administrateur). Nous utilisons également une clé secrète JWT stockée dans une variable d'environnement pour sécuriser le token. Enfin, nous définissons une durée de validité pour le token (ici, 1 heure).

Créer une fonction de validation de token :

    const validateToken = (req, res, next) => {
    const authHeader = req.headers.authorization;
    if (!authHeader) {
        return res.status(401).json({ message: 'No token provided' });
    }

    const token = authHeader.split(' ')[1];

    try {
        const decodedToken = jwt.verify(token, process.env.JWT_SECRET);
        req.userData = {
        userId: decodedToken.userId,
        email: decodedToken.email,
        isAdmin: decodedToken.isAdmin,
        };
        next();
    } catch (error) {
        return res.status(401).json({ message: 'Invalid token' });
    }
    };

Dans cette fonction, nous récupérons le token envoyé dans le header de la requête, nous le décodons en utilisant la méthode "jwt.verify" et la clé secrète JWT, et nous stockons les informations de l'utilisateur dans l'objet "userData" de la requête. Si le token est invalide ou n'est pas fourni, nous renvoyons une réponse d'erreur. Si le token est valide, nous appelons la fonction "next" pour passer à la prochaine étape de la requête.

Utiliser la fonction de validation de token dans les routes protégées :
    router.get('/protected', validateToken, (req, res) => {
    res.json({ message: 'This route is protected' });
    });

Dans cette route, nous utilisons la fonction "validateToken" comme middleware pour protéger l'accès à la ressource. Si le token fourni est valide, la réponse sera renvoyée. Sinon, une réponse d'erreur sera renvoyée.

En utilisant ces étapes, nous avons configuré l'authentification JWT pour les utilisateurs de notre API en ExpressJS.